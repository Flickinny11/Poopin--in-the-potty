name: 🚀 VidLiSync Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Security and Quality Checks
  security-scan:
    name: 🔒 Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level moderate

  # Frontend Tests and Build
  frontend-test:
    name: 🎨 Frontend Test & Build
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npx tsc --noEmit

      - name: Build frontend
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: https://vidlisync.com
          NEXT_PUBLIC_API_URL: https://vidlisync-backend.railway.app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: .next
          retention-days: 7

  # Backend Tests and Build
  backend-test:
    name: 🔧 Backend Test & Build
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --tb=short
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          JWT_SECRET_KEY: test-secret-key

      - name: Build Docker image
        run: |
          cd backend
          docker build -t vidlisync-backend:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run --rm --name test-backend \
            -e DATABASE_URL=sqlite:///test.db \
            -e JWT_SECRET_KEY=test-secret \
            -p 8000:8000 \
            -d vidlisync-backend:${{ github.sha }}
          sleep 10
          curl -f http://localhost:8000/health || exit 1
          docker stop test-backend

  # Database Migration Test
  db-migration-test:
    name: 🗄️ Database Migration Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test migration scripts
        run: |
          export PGPASSWORD=postgres
          psql -h localhost -U postgres -d test_db -f migrations/001_initial_schema.sql
          psql -h localhost -U postgres -d test_db -f migrations/002_add_indexes.sql
          psql -h localhost -U postgres -d test_db -f migrations/003_rls_policies.sql
          psql -h localhost -U postgres -d test_db -f migrations/004_functions_triggers.sql

      - name: Test rollback scripts
        run: |
          export PGPASSWORD=postgres
          psql -h localhost -U postgres -d test_db -f migrations/rollback/003_rollback.sql
          psql -h localhost -U postgres -d test_db -f migrations/rollback/002_rollback.sql
          psql -h localhost -U postgres -d test_db -f migrations/rollback/001_rollback.sql

  # Deploy to Staging
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, db-migration-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Frontend to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Backend to Railway (Staging)
        run: |
          npx @railway/cli deploy --service backend --environment staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://vidlisync-staging.vercel.app || exit 1
          curl -f https://vidlisync-backend-staging.railway.app/health || exit 1

  # Performance Tests
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install artillery
        run: npm install -g artillery

      - name: Run performance tests
        run: |
          # Create artillery config
          cat > performance-test.yml << EOF
          config:
            target: 'https://vidlisync-backend-staging.railway.app'
            phases:
              - duration: 60
                arrivalRate: 10
            defaults:
              headers:
                Authorization: 'Bearer ${{ secrets.TEST_JWT_TOKEN }}'
          scenarios:
            - name: Health check
              requests:
                - get:
                    url: '/health'
            - name: User endpoints
              requests:
                - get:
                    url: '/api/users/me'
          EOF
          artillery run performance-test.yml

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Frontend to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy Backend to Railway (Production)
        run: |
          npx @railway/cli deploy --service backend --environment production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Deploy AI Service to RunPod
        run: |
          kubectl apply -f deployment/runpod-ai-service.yaml
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Run production health checks
        run: |
          sleep 60
          curl -f https://vidlisync.com || exit 1
          curl -f https://vidlisync-backend.railway.app/health || exit 1
          curl -f https://ai.vidlisync.com/health || exit 1

      - name: Run database migrations
        run: |
          cd backend
          alembic upgrade head
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: '🚀 VidLiSync successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: '❌ VidLiSync production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # Rollback Job (Manual trigger only)
  rollback:
    name: 🔄 Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback Frontend
        run: |
          vercel rollback --token ${{ secrets.VERCEL_TOKEN }}

      - name: Rollback Backend
        run: |
          npx @railway/cli rollback --service backend --environment production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://vidlisync.com || exit 1
          curl -f https://vidlisync-backend.railway.app/health || exit 1

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#deployments'
          text: '🔄 VidLiSync rollback completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}